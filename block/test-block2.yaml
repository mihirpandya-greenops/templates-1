apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: github-pr
  namespace: argo
spec:
  entrypoint: pr
  templates:
    - name: pr
      script:
        image: docker.io/greenopsinc/pygithub
        env:
          - name: TOKEN
            valueFrom:
              secretKeyRef:
                name: github-pat
                key: token
                optional: false
        command: [python]
        source: |
          from github import Github
          import os
          import time
          import string
          import random
          source = "main"
          letters = string.ascii_lowercase
          new_branch = "test-" + ''.join(random.choice(letters) for i in range(10))
          token = os.getenv('TOKEN')
          print(token)
          g = Github(token)
          repo = g.get_repo("mihirpandya-greenops/testapp_source")
          sb = repo.get_branch(source)
          #Creating new branch
          repo.create_git_ref(ref='refs/heads/' + new_branch, sha=sb.commit.sha)
          #Updating new branch
          contents = repo.get_contents("/deployment-manifest/k8s/manifest.yaml", ref=new_branch)
          raw_contents = contents.decoded_content.decode()
          if "docker.io/1mihirpandya/testapp" in raw_contents:
              raw_contents = raw_contents.replace("image: docker.io/1mihirpandya/testapp", "image: testapp")
              raw_contents = raw_contents.replace("replicas: 3", "replicas: 5")
          else:
              raw_contents = raw_contents.replace("image: testapp", "image: docker.io/1mihirpandya/testapp")
              raw_contents = raw_contents.replace("replicas: 5", "replicas: 3")
          repo.update_file(contents.path, "updating release", raw_contents, contents.sha, branch=new_branch)
          #Creating pull request
          pr = repo.create_pull(title="Updating release", body="updates", head=new_branch, base=source)
          #Waiting for merge
          while not pr.is_merged():
              time.sleep(10)
